.container
  .row
    .col-xs-12.col-md-2
      // style="background: url(e_ei1061_i02-1_1.png)"
      .alert.alert-info
        h2 EI1061
        h1 I2
        h3 2013/14
      ul.nav.nav-pills.flex-column
        li.nav-item
          a.nav-link.active(href='#1') Ejercicio 1
        li.nav-item
          a.nav-link(href='#2') Ejercicio 2
        li.nav-item
          a.nav-link(href='#3') Ejercicio 3
        li.nav-item
          a.nav-link(href='#4') Ejercicio 4
        li.nav-item
          a.nav-link(href='#5') Ejercicio 5
        li.nav-item
          a.nav-link(href='#6') Ejercicio 6
        li.nav-item
          a.nav-link(href='#7') Ejercicio 7
    .col-xs-12.col-md-10
      .page-header
        h1 Entregable I2
        h2 EI1061 &mdash; Arquitecturas Avanzadas
      dl
        dt Apellidos y nombre:
        dd Gómez Alcañiz, Óscar
        dt Tiempo estimado:
        dd 3h
        dt Tiempo empleado:
        dd ~3h
      h2 Riesgos de control
      ol
        li
          a(name='1')
          | Lee la sección 2.3.2 del capítulo 2 del libro &ldquo;Arquitectura 
          | de Computadores&rdquo; (&asymp;5 páginas). Identifica aquellas 
          | partes que se corresponden con los objetivos formativos de 
          | dicho tema (los objetivos formativos del tema 1 están en un 
          | documento propio en el Aula Virtual).
          blockquote
            | #[strong 1.5] Explicar en qué consisten los riesgos de control, y 
            | sus causas, consecuencias y soluciones
        li
          a(name='2')
          | Distingue entre evaluar la condición de salto y resolver 
          | el salto: Evaluar la condición supone realizar las operaciones 
          | necesarias para conocer si el salto se debe producir o no. 
          | Resolver un salto incluye evaluarlo, realizar las operaciones 
          | necesarias para averiguar la dirección de salto y escribir 
          | esa dirección en el PC.
        li
          a(name='3')
          | Considera el procesador sencillo (4 etapas: #[code IF], #[code ID], 
          | #[code ALU], #[code OS], de un ciclo cada una), donde los riesgos de 
          | control se resuelven insertando instrucciones #[code nop] tras el salto. 
          | ¿Cuántas instrucciones #[code nop] sería necesario insertar si el 
          | salto se resuelve en la etapa #[code ALU]? ¿Por qué?
          blockquote
            | Dos instrucciones #[code nop], ya que no se podría saber si se da 
            | la condición de salto hasta el tercer ciclo de la instrucción que 
            | precede al salto. Si el salto es efectivo, el nuevo PC se calcula 
            | en la tercera etapa de la instrucción del salto, y para entonces 
            | ya hay dos instrucciones en el cauce de ejecución.
        li
          a(name='4')
          | En el procesador sencillo, si el salto se resuelve en la etapa
          code ID
          | , ¿cuántas instrucciones
          code nop
          |  sería necesario insertar y qué tipo de dato (direccionamiento) podremos usar para el desplazamiento respecto al PC? ¿Por qué?
          blockquote
            | Basta una instrucción
            code nop
            | , pues en el segundo ciclo de la instrucción del salto ya se puede calcular el nuevo PC, usando para ello un offset sumado al PC actual, que se extrae directamente de un campo de la instrucción.
        li
          a(name='5')
          | En el procesador sencillo, a la hora de evaluar el salto en la etapa
          code ID
          | , ¿qué ventaja presenta el formato de instrucción de salto
          code bz r3, despl
          | , donde el salto se produce si
          code r3
          |  es cero, frente al formato
          code bz despl
          | , donde el salto se produce si el resultado de la instrucción anterior al salto fue cero? Ilustra tu respuesta mediante algún ejemplo.
          blockquote
            | En el caso del formato
            code bz r3, despl
            | , tenemos que al poder especificar sobre qué registro se hace la comparación con 0, no es necesario esperar a que la etapa
            code ALU
            |  de la anterior instrucción termine si no hay dependencias en el salto. En el otro formato la dependencia entre la instrucción anterior al salto y la del salto obliga a que vayan seguidas y no pueden intercalarse instrucciones no dependientes entre ambas.
        li
          a(name='6')
          | Considera el siguiente código
          pre.

          p
            | ¿Si r0=0, cuántos ciclos necesita el procesador sencillo para ejecutarlo si los saltos se resuelven en la etapa ID y se tratan mediante la parada del cauce? Asume que existen caminos de atajo en el procesador. ¿Cuántos ciclos necesita el procesador sencillo para ejecutarlo si los saltos se resuelven en la etapa ALU y se tratan mediante la técnica de salto retardado? Reorganiza el código si es posible para minimizar el efecto negativo del salto.
          .table-responsive
            table.cycle-diagram.table.table-striped
              caption
                strong Resolución en ID, tratamiento con parada
              thead
                tr
                  th Ciclo
                  th 1
                  th 2
                  th 3
                  th 4
                  th 5
                  th 6
                  th 7
                  th 8
                  th 9
                  th 10
                  th 11
                  th 12
                  th 13
                  th &hellip;
              tbody
                tr
                  td addi r1, r0, 20
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.start ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='10')
                tr
                  td bucle: add r2, r2, r1
                  td
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.end ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='9')
                tr
                  td multi r3, r1, 2
                  td(colspan='2')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.start ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='8')
                tr
                  td add r4, r4, r3
                  td(colspan='3')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.end ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='7')
                tr
                  td addi r1, r1, -1
                  td(colspan='4')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.start ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='6')
                tr
                  td bnez r1, bucle
                  td(colspan='5')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning.opacity-50 IF
                  td
                    .alert.alert-success.end ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='4') &larr; entra en el bucle
                tr
                  td NOP
                  td(colspan='7')
                  td.opacity-50
                    .alert.alert-warning *
                  td.opacity-50
                    .alert.alert-warning *
                  td.opacity-50
                    .alert.alert-warning *
                  td.opacity-50
                    .alert.alert-warning *
                  td(colspan='3') &larr; ciclo de parada
                tr
                  td
                  td(colspan='14') (se repite 20 veces más)
                tr
                  th(colspan='2') &hellip;
                  th 136
                  th 137
                  th 138
                  th 139
                  th 140
                  th 141
                  th 142
                  th 143
                  th 144
                  th 145
                  th 146
                  th 147
                  th 148
                tr
                  td add r5, r2, r4
                  td(colspan='7')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='3')
                tr
                  td sub r6, r2, r4
                  td(colspan='8')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='2')
                tr
                  td mult r7, r2, r4
                  td(colspan='9')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td
              tfoot
                tr
                  td(colspan='15')
                    strong Total:
                    |  4 + 20 &times; 7 + 3 = 147 ciclos
          .table-responsive
            table.cycle-diagram.table.table-striped
              caption
                strong Resolución en ALU, tratamiento con salto retardado
              thead
                tr
                  th Ciclo
                  th 1
                  th 2
                  th 3
                  th 4
                  th 5
                  th 6
                  th 7
                  th 8
                  th 9
                  th 10
                  th 11
                  th 12
                  th 13
                  th &hellip;
              tbody
                tr
                  td addi r1, r0, 20
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.start ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='10')
                tr
                  td bucle: add r2, r2, r1
                  td
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.end ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='9')
                tr
                  td multi r3, r1, 2
                  td(colspan='2')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.start ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='8')
                tr
                  td addi r1, r1, -1
                  td(colspan='3')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.start ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='7')
                tr
                  td bnez r1, bucle
                  td(colspan='4')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.end ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='6') &larr; entra en el bucle
                tr
                  td
                    strong add r4, r4, r3
                  td(colspan='5')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='5') &larr; reordenada para rellenar
                tr
                  td NOP
                  td(colspan='6')
                  td.opacity-50
                    .alert.alert-warning *
                  td.opacity-50
                    .alert.alert-warning *
                  td.opacity-50
                    .alert.alert-warning *
                  td.opacity-50
                    .alert.alert-warning *
                  td(colspan='4') &larr; ciclo de parada
                tr
                  td
                  td(colspan='14') (se repite 20 veces más)
                tr
                  th(colspan='2') &hellip;
                  th 116
                  th 117
                  th 118
                  th 119
                  th 120
                  th 121
                  th 122
                  th 123
                  th 124
                  th 125
                  th 126
                  th 127
                  th 128
                tr
                  td add r5, r2, r4
                  td(colspan='7')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='3')
                tr
                  td sub r6, r2, r4
                  td(colspan='8')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='2')
                tr
                  td mult r7, r2, r4
                  td(colspan='9')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td
              tfoot
                tr
                  td(colspan='15')
                    strong Total:
                    |  4 + 20 &times; 6 + 3 = 127 ciclos
        li
          a(name='7')
          | Una posible solución para los saltos es la técnica de predicción no tomado en la que el procesador sigue ejecutanto la(s) instrucción(es) siguiente(s) al salto como si éste no se tomase y, cuando el salto se resuelve, las aborta si éste sí debía haber sido tomado. Para el código anterior, ¿cuántos ciclos necesita el procesador sencillo para ejecutarlo si los saltos se resuelven en la etapa ID y se tratan mediante la técnica predicción no tomado? ¿y si los saltos se resuelven en la etapa ALU?
          .table-responsive
            table.cycle-diagram.table.table-striped
              caption
                strong Resolución en ALU, tratamiento con predicción no tomado
              thead
                tr
                  th Ciclo
                  th 1
                  th 2
                  th 3
                  th 4
                  th 5
                  th 6
                  th 7
                  th 8
                  th 9
                  th 10
                  th 11
                  th 12
                  th 13
                  th &hellip;
              tbody
                tr
                  td addi r1, r0, 20
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.start ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='10')
                tr
                  td bucle: add r2, r2, r1
                  td
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.end ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='9')
                tr
                  td multi r3, r1, 2
                  td(colspan='2')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.start ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='8')
                tr
                  td addi r1, r1, -1
                  td(colspan='3')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-success.start ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='7')
                tr
                  td
                    strong add r4, r4, r3
                  td(colspan='4')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='6') &larr; reordenada para rellenar
                tr
                  td bnez r1, bucle
                  td(colspan='5')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='5') &larr; entra en el bucle
                tr
                  td add r5, r2, r4
                  td(colspan='6') se descarta excepto en la última iteración &rarr;
                  td
                    .alert.alert-warning.opacity-50 IF
                  td
                    .alert.alert-warning.opacity-50 ID
                  td
                    .alert.alert-warning.opacity-50 ALU
                  td
                    .alert.alert-warning.opacity-50 OS
                  td(colspan='4')
                tr
                  td sub r6, r2, r4
                  td(colspan='7') &quot; idem
                  td
                    .alert.alert-warning.opacity-50 IF
                  td
                    .alert.alert-warning.opacity-50 ID
                  td
                    .alert.alert-warning.opacity-50 ALU
                  td
                    .alert.alert-warning.opacity-50 OS
                  td(colspan='3')
                tr
                  td
                  td(colspan='14') (se repite 20 veces más)
                tr
                  th(colspan='2') &hellip;
                  th 116
                  th 117
                  th 118
                  th 119
                  th 120
                  th 121
                  th 122
                  th 123
                  th 124
                  th 125
                  th 126
                  th 127
                  th 128
                tr
                  td mult r7, r2, r4
                  td(colspan='7')
                  td
                    .alert.alert-warning IF
                  td
                    .alert.alert-warning ID
                  td
                    .alert.alert-warning ALU
                  td
                    .alert.alert-warning OS
                  td(colspan='3')
              tfoot
                tr
                  td(colspan='15')
                    strong Total:
                    |  4 + 20 &times; 7 + 1 = 125 ciclos
      footer
        small #[strong Nota:] Este entregable forma parte de la evaluación de la asignatura.